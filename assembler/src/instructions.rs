use architecture::Opcode;

use crate::operand::Operand;

pub fn word_opcode(word: &str) -> Option<Opcode> {
    Some(match word {
        "nop"     => Opcode::Nop,
        "move"    => Opcode::Move,
        "const8"  => Opcode::Const8,
        "const16" => Opcode::Const16,
        "const32" => Opcode::Const32,
        "const64" => Opcode::Const64,
        "load8"   => Opcode::Load8,
        "load16"  => Opcode::Load16,
        "load32"  => Opcode::Load32,
        "load64"  => Opcode::Load64,
        "store8"  => Opcode::Store8,
        "store16" => Opcode::Store16,
        "store32" => Opcode::Store32,
        "store64" => Opcode::Store64,
        "and"     => Opcode::And,
        "or"      => Opcode::Or,
        "xor"     => Opcode::Xor,
        "shl"     => Opcode::ShiftL,
        "shr"     => Opcode::ShiftR,
        "add"     => Opcode::Add,
        "sub"     => Opcode::Sub,
        "mul"     => Opcode::Mul,
        "div"     => Opcode::Div,
        "rem"     => Opcode::Rem,
        "eq"      => Opcode::Eq,
        "gt"      => Opcode::Gt,
        "jump"    => Opcode::Jump,
        "jumpif"  => Opcode::JumpIf,
        "wait"    => Opcode::Wait,
        "lock"    => Opcode::Lock,
        "unlock"  => Opcode::Unlock,
        "start"   => Opcode::Start,
        "stop"    => Opcode::Stop,
        "end"     => Opcode::End,
        "scan"    => Opcode::Scan,
        "print"   => Opcode::Print,
        "exit"    => Opcode::Exit,
        _ => return None,
    })
}

pub fn opcode_operands(opcode: Opcode) -> &'static [Operand] {
    match opcode {
        Opcode::Nop     => &[],
        Opcode::Move    => &[Operand::Register, Operand::Register],
        Opcode::Const8  => &[Operand::Register, Operand::Const8],
        Opcode::Const16 => &[Operand::Register, Operand::Const16],
        Opcode::Const32 => &[Operand::Register, Operand::Const32],
        Opcode::Const64 => &[Operand::Register, Operand::Const64],
        Opcode::Load8   => &[Operand::Register, Operand::Register, Operand::Lock],
        Opcode::Load16  => &[Operand::Register, Operand::Register, Operand::Lock],
        Opcode::Load32  => &[Operand::Register, Operand::Register, Operand::Lock],
        Opcode::Load64  => &[Operand::Register, Operand::Register, Operand::Lock],
        Opcode::Store8  => &[Operand::Register, Operand::Register, Operand::Lock],
        Opcode::Store16 => &[Operand::Register, Operand::Register, Operand::Lock],
        Opcode::Store32 => &[Operand::Register, Operand::Register, Operand::Lock],
        Opcode::Store64 => &[Operand::Register, Operand::Register, Operand::Lock],
        Opcode::And     => &[Operand::Register, Operand::Register, Operand::Register, Operand::Lock],
        Opcode::Or      => &[Operand::Register, Operand::Register, Operand::Register, Operand::Lock],
        Opcode::Xor     => &[Operand::Register, Operand::Register, Operand::Register, Operand::Lock],
        Opcode::ShiftL  => &[Operand::Register, Operand::Register, Operand::Register, Operand::Lock],
        Opcode::ShiftR  => &[Operand::Register, Operand::Register, Operand::Register, Operand::Lock],
        Opcode::Add     => &[Operand::Register, Operand::Register, Operand::Register, Operand::Lock],
        Opcode::Sub     => &[Operand::Register, Operand::Register, Operand::Register, Operand::Lock],
        Opcode::Mul     => &[Operand::Register, Operand::Register, Operand::Register, Operand::Lock],
        Opcode::Div     => &[Operand::Register, Operand::Register, Operand::Register, Operand::Lock],
        Opcode::Rem     => &[Operand::Register, Operand::Register, Operand::Register, Operand::Lock],
        Opcode::Eq      => &[Operand::Register, Operand::Register, Operand::Register, Operand::Lock],
        Opcode::Gt      => &[Operand::Register, Operand::Register, Operand::Register, Operand::Lock],
        Opcode::Jump    => &[Operand::Register],
        Opcode::JumpIf  => &[Operand::Register, Operand::Register],
        Opcode::Wait    => &[Operand::Lock],
        Opcode::Lock    => &[Operand::Lock],
        Opcode::Unlock  => &[Operand::Lock],
        Opcode::Start   => &[Operand::Thread, Operand::Register],
        Opcode::Stop    => &[Operand::Thread],
        Opcode::End     => &[],
        Opcode::Scan    => &[Operand::Register],
        Opcode::Print   => &[Operand::Register],
        Opcode::Exit    => &[],
    }
}
